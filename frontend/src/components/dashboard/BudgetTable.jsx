// src/components/dashboard/BudgetTable.jsx
import React, { useState } from 'react';
import { useBudget } from '../../context/BudgetContext';
import jsPDF from 'jspdf';
import 'jspdf-autotable';

const BudgetTable = () => {
  const { budgetEntries, deleteBudgetEntry } = useBudget();
  const [filter, setFilter] = useState('all');

  // Filter entries by month
  const filteredEntries = budgetEntries.filter(entry => {
    if (filter === 'all') return true;
    
    const entryDate = new Date(entry.date);
    const entryMonth = entryDate.toLocaleString('default', { month: 'long' });
    return entryMonth === filter;
  });

  // Generate PDF for an entry
  const generateEntryPDF = (entry) => {
    // Create new PDF document
    const doc = new jsPDF();
    
    // Add Rotary logo/header
    doc.setFillColor(0, 51, 153); // Rotary blue
    doc.rect(0, 0, 210, 25, 'F');
    
    doc.setTextColor(255, 255, 255); // White text
    doc.setFontSize(16);
    doc.text('ROTARY CLUB OF AVINASHI', 105, 15, { align: 'center' });
    
    // Reset text color to black
    doc.setTextColor(0, 0, 0);
    
    // Title
    doc.setFontSize(20);
    doc.text('Budget Entry Receipt', 105, 40, { align: 'center' });
    
    // Entry date
    const entryDate = new Date(entry.date).toLocaleDateString();
    doc.setFontSize(12);
    doc.text(`Date: ${entryDate}`, 20, 50);
    doc.text(`Entry ID: ${entry.id}`, 140, 50);
    
    // Create data table
    const tableData = [
      ['Category:', entry.category || 'Not specified'],
      ['Description:', entry.description || 'Not specified'],
      ['Budget Amount:', `$${parseFloat(entry.budgetAmount || 0).toLocaleString()}`],
      ['Actual Amount:', `$${parseFloat(entry.actualAmount || 0).toLocaleString()}`]
    ];
    
    // Calculate variance
    const budgetAmount = parseFloat(entry.budgetAmount) || 0;
    const actualAmount = parseFloat(entry.actualAmount) || 0;
    const variance = budgetAmount - actualAmount;
    const varianceText = variance >= 0 ? 
      `$${variance.toFixed(2)} (Under budget)` : 
      `$${Math.abs(variance).toFixed(2)} (Over budget)`;
    
    tableData.push(['Variance:', varianceText]);
    
    // Add table to PDF
    doc.autoTable({
      startY: 60,
      head: [['Field', 'Value']],
      body: tableData,
      theme: 'grid',
      headStyles: { 
        fillColor: [255, 195, 0], // Rotary gold
        textColor: [0, 0, 0],
        fontStyle: 'bold'
      },
      alternateRowStyles: {
        fillColor: [240, 240, 240]
      },
      columnStyles: {
        0: { fontStyle: 'bold', cellWidth: 50 },
        1: { cellWidth: 120 }
      }
    });
    
    // Add signature section
    const finalY = doc.lastAutoTable.finalY + 20;
    doc.line(20, finalY, 100, finalY);
    doc.text('Authorized Signature', 20, finalY + 5);
    
    // Add footer
    doc.setFontSize(10);
    doc.text('Generated by Rotary Club Budget Management System', 105, 280, { align: 'center' });
    doc.text(`Document ID: ${entry.id}`, 105, 285, { align: 'center' });
    
    // Save PDF
    doc.save(`budget-entry-${entry.id}.pdf`);
  };

  return (
    <div className="mt-8">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-semibold text-blue-800">Budget Entries</h2>
        <select
          className="border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-yellow-500"
          value={filter}
          onChange={(e) => setFilter(e.target.value)}
        >
          <option value="all">All Months</option>
          <option value="January">January</option>
          <option value="February">February</option>
          <option value="March">March</option>
          <option value="April">April</option>
          <option value="May">May</option>
          <option value="June">June</option>
          <option value="July">July</option>
          <option value="August">August</option>
          <option value="September">September</option>
          <option value="October">October</option>
          <option value="November">November</option>
          <option value="December">December</option>
        </select>
      </div>
      
      <div className="overflow-x-auto border-t border-gray-200">
        <table className="min-w-full divide-y divide-gray-200">
          <thead>
            <tr className="bg-gray-50">
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Date <span className="cursor-pointer">â†“</span>
              </th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Category
              </th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Description
              </th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Budget
              </th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actual
              </th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Receipt
              </th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {filteredEntries.length === 0 ? (
              <tr>
                <td colSpan="7" className="px-6 py-4 whitespace-nowrap text-center text-sm text-gray-500">
                  No budget entries found
                </td>
              </tr>
            ) : (
              filteredEntries.map((entry) => (
                <tr key={entry.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {new Date(entry.date).toLocaleDateString()}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {entry.category}
                  </td>
                  <td className="px-6 py-4 text-sm text-gray-900">
                    {entry.description}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    ${Number(entry.budgetAmount).toLocaleString()}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    ${Number(entry.actualAmount).toLocaleString()}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm">
                    <button
                      onClick={() => generateEntryPDF(entry)}
                      className="text-blue-600 hover:text-blue-900 underline flex items-center"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V7.414A2 2 0 0015.414 6L12 2.586A2 2 0 0010.586 2H6zm5 6a1 1 0 10-2 0v3.586l-1.293-1.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 11.586V8z" clipRule="evenodd" />
                      </svg>
                      PDF
                    </button>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <button
                      onClick={() => deleteBudgetEntry(entry.id)}
                      className="text-red-600 hover:text-red-900"
                    >
                      Delete
                    </button>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default BudgetTable;